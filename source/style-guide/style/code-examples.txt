.. _code-examples:

=============
Code Examples
=============

.. note::

   For more information about formatting code, see the "Code" row in
   :ref:`text-formatting`.

Use the following guidelines when creating blocks of code as input
or output examples:

-  Don't use screenshots to show code examples. Format them as blocks
   of code by using the ``.. code-block::`` directive. For
   more information about formatting, see :ref:`text-formatting`.

-  When showing input, don't include a command prompt (such as $). Users
   can copy many of our examples. If a user pastes a command with a
   command prompt included, it can cause an error and make the user
   believe our product doesn't work as expected.

-  As often as necessary, show input and output in separate blocks and
   provide explanations for each. For example, if the input contains
   arguments or parameters, explain those. If the user should expect
   something specific in the output, or you want to show only part of
   lengthy output, provide an explanation.

-  When the command is simple, and there's nothing specific to say
   about the output, you can show the input and output in the same code
   block, as users would actually see the code in their own terminal.
   In this case, you can include the command prompt to differentiate the
   input from the output. Ensure that this code block is set to 
   ``:copyable: false``.

-  Ensure that any placeholder text in code is obvious.

   - Enclose placeholders in angle brackets.
   - Use lowercase letters for single-word placeholders. To show
     multiple-word placeholders, user lowercase letters and separate the
     words with hyphens (kebab-case).

     .. note::

        Use lowercase and kebab-case unless you have to follow the
        conventions of the programming language. For example, you might
        need to use underscores (account_ID) or all capitals
        (ACCOUNT_ID).

-  Follow the conventions of the programming language used and preserve
   the capitalization that the author of the code used.

-  For readability, you can break up long lines of input into readable
   blocks by ending each line with a backslash.

-  If the input includes a list of arguments or parameters, show the
   important or relevant ones first, and group related ones. If no
   other order makes sense, use alphabetical order. If you explain the
   arguments or parameters in text, show them in the same order that
   they appear in the code block.

- Set code blocks that contain only example output to 
  ``:copyable: false``. 

The following examples illustrate many of these guidelines:

Configure the MongoDB CLI
-------------------------

#. Create a profile.

   This command creates a profile with a custom name in the MongoDB CLI
   Configuration File. To use this profile, you must specify it with the
   ``--profile`` flag in every MongoDB CLI command.

   Run the ``mongocli config`` command:

   .. code-block:: sh
   
      mongocli config  --profile <profile-name>

#. Enter your Programmatic API Key and Project ID.

   When prompted, enter the Public API Key, Private API Key, and Project ID for your Atlas deployment.

   .. code-block:: sh
      :copyable: false

      ? Public API Key: abcdef
      ? Private API Key: [? for help] ************************************
      ? Project ID [optional]: 7ehf04abc10defb66c7d1234c

   If you donâ€™t save your project ID in your profile, you must specify the ``--projectId`` option every time you run a MongoDB CLI command.

#. Verify your profile.
   
   View the configuration file or run the mongocli config describe command to verify your profile.

   .. important::

      Your API keys are like passwords. The configuration file stores API keys in plaintext, so ensure that you secure the configuration file appropriately.

   In the following example, the ``mongocli config describe`` command returns the settings in the profile named myMongoDB:

   .. code-block:: sh

      mongocli config describe myMongoDB

   The command returns following settings. The myMongoDB profile has a Programmatic API Key, which is redacted in the command output for security purposes, and project ID for an Atlas deployment.

   .. code-block:: sh 
      :copyable: false

      private_api_key = redacted
      public_api_key = redacted
      project_id = 7ehf04abc10defb66c7d1234c
      service = cloud   

